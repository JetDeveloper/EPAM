1.    ЛЕКСИКА ЯЗЫКА

Лексика описывает, из чего состоит текст программы, каким образом он записывается, и на какие простейшие слова (лексемы) компилятор разбивает программу при анализе.
Лексемы (или tokens в английском варианте) - это основные "кирпичики", из которых строится любая программа на языке Java.
Эта лекция раскрывает многие детали внутреннего устройства языка, и невозможно написать ни одной строчки кода, не затронув ее. Именно поэтому курс начинается с основ лексического анализа.

1.1. Кодировка

Технология Java, как платформа, изначально спроектированная для Глобальной сети Интернет, должна быть многоязыковой, а значит обычный набор символов ASCII (American Standard Code for Information Interchange, Американский стандартный код обмена информацией), включающий в себя лишь латинский алфавит, цифры и простейшие специальные знаки (скобки, знаки препинания, арифметические операции и др.) не достаточен. Поэтому для записи текста программы применяется более универсальная кодировка Unicode.
Как известно, Unicode представляет символы кодом из 2 байт, описывая, таким образом, 65.535 символов. Это позволяет поддерживать практически все распространенные языки мира. Первые 128 символов совпадают с набором ASCII. Однако, понятно, что требуется некоторое специальное обозначение, чтобы иметь возможность задавать в программе любой символ Unicode, ведь никакая клавиатура не позволяет вводить более 65 тысяч различных знаков. Эта конструкция представляет символ Unicode, используя только символы ASCII. Например, если в программу нужно вставить знак с кодом 6917, необходимо его представить в шестнадцатеричном формате (1B05) и записать:
\u1B05
причем буква u должна быть прописной, а шестнадцатеричные цифры A, B, C, D, E, F можно использовать произвольно, как заглавные, так и строчные. Таким образом можно закодировать все символы Unicode от \u0000 до \uFFFF. 

Буквы русского алфавита начинаются с \u0410 (только буква Ё имеет код \u0401) по \u044F (код буквы ё \u0451). 

В последних версиях JDK в состав демонстрационных приложений и апплетов входит небольшая программа SymbolTest, позволяющая просматривать весь набор символов Unicode. Ее аналог несложно написать самостоятельно. Для перекодирования больших текстов служит утилита native2ascii, также входящая в JDK. Она может работать как в прямом режиме - переводить из разнообразных кодировок в Unicode, записанный ASCII-символами, так и в обратном (опция -reverse) - из Unicode в стандартную кодировку операционной системы.

Разработчики Java следят за развитием стандарта Unicode и базируется на современных версиях. Для любой JDK точную версию Unicode, используемую в ней, можно узнать из документации к классу Character. Официальный веб-сайт стандарта, где можно получить дополнительную информацию - http://www.unicode.org/.

Итак, используя простейшую кодировку ASCII, можно ввести произвольную последовательность Unicode символов. Следует отметить, что Unicode используется не для всех лексем, а только для тех, для которых важна поддержка многих языков, а именно: комментарии, идентификаторы, символьные и строковые литералы. Для записи остальных лексем вполне достаточно только ASCII символов.

1.2.    Анализ программы

Программа на языке Java записывается в текстовом виде и состоит из вводимых элементов. Компилятор, анализируя программу, сразу разделяет ее на:
• пробелы (white spaces);
• комментарии (comments);
• основные лексемы (tokens).

1.2.1. Пробелы

Пробелами (пробельными символами) в данном случае называют все символы, разбивающие текст программы на лексемы. Пробельные символы и комментарии являются разделителями между элементами программы. Элементы программы могут отделяться друг от друга одним или несколькими разделителями. 

Пробельными символами, помимо пробела (space) (код "20", \u0020, десятичный код 32) являются: символ горизонтальной табуляции (код "09"), символ вертикальной табуляции (код "0B") и переход на новую страницу (код "0C"), а также символы возврата каретки и перехода на новую строку.

Они используются для разделения лексем, а также для оформления кода, чтобы его было легче читать. Например, следующую часть программы (вычисление корней квадратного уравнения):
double a = 1, b = 1, c = 6;
double D = b * b - 4 * a * c;
if (D >= 0) {
double x1 = (-b + Math.sqrt (D)) / (2 * a);
double x2 = (-b - Math.sqrt (D)) / (2 * a);
}
можно записать и в таком виде:
double a=1,b=1,c=6;double D=b*b-4*a*c;if(D>=0){double
x1=(-b+Math.sqrt(D))/(2*a);double x2=(-b-Math.sqrt(D))/(2*a);}
В обоих случаях компилятор сгенерирует абсолютно одинаковый код. Единственное соображение, которым должен руководствоваться разработчик - легкость чтения и дальнейшей поддержки такого кода.

Программа разбивается на строки. Символами окончания строки являются либо один из символов CR (Carriage Return – возврат каретки) (код "0D", \u000d, десятичный код 13) или LF (Line Feed – переход на новую строку) (код "0A", \u000a, десятичный код 10), либо последовательность из этих двух символов. Эти символы служат для текстового редактора указанием вывода следующей за ними информации с новой строки и обычно не выводятся.

Для разбиения текста на строки в ASCII используются два символа - "возврат каретки" (CR) и символ новой строки (LF). Чтобы не зависеть от особенностей используемой платформы, в Java применяется более гибкий подход. 

Завершением строки считается:
•    ASCII-символ LF, символ новой строки;
•    ASCII-символ CR, "возврат каретки";
•    символ CR, за которым сразу же следует символ LF.

Разбиение на строки важно для корректного разбиения на лексемы (как уже говорилось, завершение строки также служит разделителем между лексемами), для правильной работы со строковыми комментариями (см. следующую тему "Комментарии"), а также для вывода отладочной информации (при выводе ошибок компиляции и времени исполнения указывается, на какой строке исходного кода они возникли).

Итак, пробелами в Java считаются:
•    ASCII-символ SP, space, пробел, \u0020, десятичный код 32;
•    ASCII-символ HT, horizontal tab, символ горизонтальной табуляции, \u0009, десятичный код 9;
•    ASCII-символ FF, form feed, символ перевода страницы (был введен для работы с принтером), \u000c, десятичный код 12;
•    завершение строки (см. выше).
